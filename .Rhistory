scale_fill_gradient(low = "blue", high = "red")
ggplot(df, aes(x, y, col = z)) +
geom_point() +
scale_fill_gradient2(low = "blue", high = "red")
ggplot(df, aes(x, y, col = z)) +
geom_point() +
scale_color_gradient(low = "blue", high = "red")
library(ggplot2)
?scale_colour_gradient
library(shiny); runApp('PreReg.R')
library(shinydashboard)
runApp('PreReg.R')
runApp('PreReg.R')
runApp('PreReg.R')
runApp('PreReg.R')
library(ggplot2)
df = data.frame(m = c("p1, p2, a1, a2, s1, s2"),
n = c(10, 12, 31, 35, 79, 102))
ggplot(df, aes(x = m, y = n)) +
geom_col()
ggplot(data = df, aes(x = m, y = n)) +
geom_col()
df = data.frame(section = rep("Pure", "Applied", "Stats", each = 2),
n = c(10, 12, 31, 35, 79, 102)
)
df = data.frame(section = rep("Pure", "Applied", "Stats", each = 2),
n = c(10, 12, 31, 35, 79, 102))
df = data.frame(section = rep(c("Pure", "Applied", "Stats"), each = 2),
n = c(10, 12, 31, 35, 79, 102))
df = data.frame(section = rep(c("Pure", "Applied", "Stats"), each = 2),
semester = rep(1 : 2, 3),
n = c(10, 12, 31, 35, 79, 102))
ggplot(data = df, aes(x = section, y = n, fill = semester)) +
geom_col()
df = data.frame(section = rep(c("Pure", "Applied", "Stats"), each = 2),
semester = factor(rep(1 : 2, 3)),
n = c(10, 12, 31, 35, 79, 102))
ggplot(data = df, aes(x = section, y = n, fill = semester)) +
geom_col()
df = data.frame(section = rep(c("Pure", "Applied", "Stats"), each = 2),
semester = factor(rep(1 : 2, 3)),
n = c(10, 10, 20, 30, 30, 20))
ggplot(data = df, aes(x = section, y = n, fill = semester)) +
geom_col()
df = data.frame(Section = rep(c("Pure", "Applied", "Stats"), each = 2),
Semester = factor(rep(1 : 2, 3)),
Credits = c(10, 10, 20, 30, 30, 20))
ggplot(data = df, aes(x = Section, y = Semester, fill = Credits)) +
geom_col()
ggplot(data = df, aes(x = Section, y = Credits, fill = Semester)) +
geom_col()
ggplot(data = df, aes(x = Semster, y = Credits, fill = Section)) +
geom_col()
ggplot(data = df, aes(x = Semester, y = Credits, fill = Section)) +
geom_col()
runApp('PreReg.R')
runApp('PreReg.R')
runApp('PreReg.R')
runApp('PreReg.R')
runApp('PreReg.R')
runApp('PreReg.R')
runApp('PreReg.R')
runApp('PreReg.R')
runApp('PreReg.R')
runApp('PreReg.R')
install.packages(c("bit", "boot", "broom", "bslib", "data.table", "digest", "dlm", "evaluate", "forecast", "foreign", "future", "glmnet", "globals", "htmltools", "htmlwidgets", "httpuv", "isoband", "jsonlite", "knitr", "listenv", "lwgeom", "maptools", "markdown", "matrixStats", "nlme", "openssl", "parallelly", "pkgbuild", "pkgload", "png", "progressr", "raster", "rmarkdown", "s2", "sass", "shiny", "stars", "stringr", "terra", "testthat", "timeDate", "tinytex", "units", "vctrs", "wk", "xfun"))
library(shiny); runApp('PreReg.R')
runApp('PreReg.R')
runApp('PreReg/PreReg.R')
runApp('PreReg/PreReg.R')
runApp('PreReg/PreReg.R')
runApp('PreReg/PreReg.R')
runApp('PreReg/PreReg.R')
runApp('PreReg/PreReg.R')
runApp('PreReg/PreReg.R')
runApp('PreReg/PreReg.R')
runApp('PreReg/PreReg.R')
runApp('PreReg/PreReg.R')
runApp('PreReg/PreReg.R')
runApp('PreReg/PreReg.R')
runApp('PreReg/PreReg.R')
runApp('PreReg/PreReg.R')
runApp('PreReg/PreReg.R')
x = 10
as.numeric(x > 5) * rep(10, 2)
as.numeric(x > 20) * rep(10, 2)
as.numeric(x > 20) * rep(10, 2) + as.numeric(x < 20) * rep(20, 2)
runApp('PreReg/PreReg.R')
c(as.numeric(x > 20) * rep(10, 2) + as.numeric(x < 20) * rep(20, 2),
as.numeric(x > 10) * rep(10, 2) + as.numeric(x < 10) * rep(20, 2))
runApp('PreReg/PreReg.R')
runApp('PreReg/PreReg.R')
c(as.numeric(x > 20 & y > 0) * rep(10, 2) + as.numeric(x < 20 & y < 0) * rep(20, 2),
as.numeric(x > 10 & y > 40) * rep(10, 2) + as.numeric(x < 10 & y > 20) * rep(20, 2))
y = 15
c(as.numeric(x > 20 & y > 0) * rep(10, 2) + as.numeric(x < 20 & y < 0) * rep(20, 2),
as.numeric(x > 10 & y > 40) * rep(10, 2) + as.numeric(x < 10 & y > 20) * rep(20, 2))
c(as.numeric(x == 20 & y == 0) * rep(10, 2) + as.numeric(x == 20 & y == 0) * rep(20, 2),
as.numeric(x == 10 & y == 40) * rep(10, 2) + as.numeric(x == 10 & y == 20) * rep(20, 2))
library(palmerpenguins)
data("penguins")
pg = na.omit(penguins)
install.packages("drat")
drat::addRepo("jr-packages")
install.packages("jrRstan")
interactive()
integrate(x^2,0,1)
?integrate
?try
library(shiny); runApp('PreReg/PreReg.R')
runApp('PreReg/PreReg.R')
runApp('PreReg/PreReg.R')
runApp('PreReg/PreReg.R')
install.packages("shinyscreenshot")
runApp('PreReg/PreReg.R')
runApp('PreReg/PreReg.R')
runApp('PreReg/PreReg.R')
runApp('PreReg/PreReg.R')
runApp('PreReg/PreReg.R')
runApp('PreReg/PreReg.R')
comp.cred
p1.choice
input$P1
cred.df
?shinyApp
source('PreReg/PreReg.R')
runApp('PreReg/PreReg.R')
y = rpois(100)
y = rpois(100, 5)
m = glm(y ~ 1, family = "poisson")
summary(m)
?glm
predict(m)
predict(m, interval = "confidence")
?predict
confint(m)
?replicate
1:5-1
x = rnorm(150000)
y = numeric(150000)
for(i in 1 : length(x)){
k = 1
if(i %% 10 == 0){y[k] = x[i]; k = k + 1}
}
head(y)
head(x)
length(x)
for(i in 1 : length(x)){
k = 1
if(i %% 10 == 0){
y[k] = x[i]
k = k + 1
}
}
head(y)
library(parallel)
detectCores()
y = rnorm(10000)
x = rnorm(10000)
f = function(p){
return(x[x %% p == 0])
}
f(100)
x[x %% 100 == 0]
x
f = function(p){
return(x[seq(p, length(x), p)])
}
f(1000)
?parSapply
cl = makeCluster(2)
parSapply(cl, p, f)
parSapply(cl, p, f, p = p)
p
p = 2^(0 : 5)
parSapply(cl, p, f, p = p)
parSapply(cl, p, f)
parSapply(cl, p, f, x = x)
stopCluster(cl)
f(1)
cl = makeCluster(2)
parSapply(cl, 2^(0 : 5), f)
stopCluster(cl)
y = rnorm(10000)
cl = makeCluster(2)
parSapply(cl, 2^(0 : 5), f, x = y)
stopCluster(cl)
cl = makeCluster(2)
res = parLapply(cl, 2^(0 : 5), f, x = y)
stopCluster(cl)
x = rnorm(10000)
cl = makeCluster(2)
clusterExport(cl, c("x", "f"))
res = parLapply(cl, 2^(0 : 5), f)
stopCluster(cl)
head(res[[1]])
cl = makeCluster(2)
clusterExport(cl, c("x", "f"))
res = parSapply(cl, 2^(0 : 5), f)
stopCluster(cl)
head(res)
f = function(p){
z = numeric(length(x))
z[[seq(p, length(x), p)]] = x[seq(p, length(x), p)]
return(z)
}
cl = makeCluster(2)
clusterExport(cl, c("x", "f"))
res = parSapply(cl, 2^(0 : 5), f)
stopCluster(cl)
f(2)
f = function(p){
z = numeric(length(x))
z[seq(p, length(x), p)] = x[seq(p, length(x), p)]
return(z)
}
f(2)
f = function(p){
z = rep(NA, length(x))
z[seq(p, length(x), p)] = x[seq(p, length(x), p)]
return(z)
}
f(2)
cl = makeCluster(2)
clusterExport(cl, c("x", "f"))
res = parSapply(cl, 2^(0 : 5), f)
stopCluster(cl)
head(res[[1]])
str(res)
head(res)
apply(res, 2, function(x){sum(is.na(x))})
require(parallel) == TRUE
require(parallel) == FALSE
p = 2^(0 : 10) # Values for downsampling variable
cl = makeCluster(detectCores() - 2) # Uses all but 2 cores for computation
clusterExport(cl, c("x", "f", "p")) # Sends the data and downsampling function to relevant threads
res = parSapply(cl, p, f) # Carries out downsampling and stores results
stopCluster(cl) # Stops the cluster partition
head(res)
names(res) = sapply(p, function(x){paste0("Downsampling Parameter ", p)})
head(res)
colnames(res) = sapply(p, function(x){paste0("Downsampling Parameter ", p)})
colnames(res) = sapply(p, function(x){paste0("Downsampling Parameter ", x)})
head(res)
f = function(p){
z = rep(NA, length(x))
z[seq(p, length(x), p)] = x[seq(p, length(x), p)]
return(z)
}
cl = makeCluster(detectCores() - 2) # Uses all but 2 cores for computation
clusterExport(cl, c("x", "f", "p")) # Sends the data and downsampling function to relevant threads
res = parSapply(cl, p, f, x = x) # Carries out downsampling and stores results
stopCluster(cl) # Stops the cluster partition
colnames(res) = sapply(p, function(x){paste0("Downsampling Parameter ", x)})
10^15
options(scipen = 1000000)
10^15
options(scipen = 10)
10^15
options(scipen = 1)
2*(10^7)
3836592*130197235
100*100
1000*1000
1000*100
10000*100
options(scipen = 4)
2.5 * 10^7
2.5 * 10^8
2.5 * 10^8
2.5 * 10^9
2.5 * 10^10
2.5 * 10^20
2.5 * 10^11
2.5 * 10^10
options(scipen = 3)
2.5 * 10^7
options(scipen = 2)
2.5 * 10^7
options(scipen = 1)
2.5 * 10^7
options(scipen = 0)
2.5 * 10^7
factorial(15)
4 ^ 16
2 ^ 16
3 ^ 16
library(dplyr)
library(dplyr)
?left_join
df = data.frame(first = c(), second = c())
for(i in 1 : 100){
df = rbind(df, c(i, 100 - i))
}
head(df)
?rbind
df = data.frame(first = c(), second = c())
df
head(df)
df = data.frame(first = c(0), second = c(100))
head(df)
for(i in 1 : 100){
df = rbind(df, c(i, 100 - i))
}
head(df)
?left_join
library(ggplot2)
run = rep(100, 100)
install.packages(c("automap", "BH", "broom", "cachem", "class", "classInt", "cli", "codetools", "colorspace", "curl", "data.table", "dbplyr", "DescTools", "dplyr", "DT", "dtplyr", "e1071", "evaluate", "expm", "fansi", "fastmap", "flextable", "fontawesome", "forcats", "forecast", "fs", "future", "gap", "gargle", "gdtools", "ggplot2", "gower", "haven", "highr", "htmlwidgets", "httpuv", "httr", "igraph", "ipred", "isoband", "janitor", "knitr", "lava", "leaflet", "lme4", "lubridate", "lwgeom", "magick", "markdown", "MASS", "mgcv", "multcomp", "nlme", "officer", "openssl", "packrat", "parallelly", "pbkrtest", "posterior", "progressr", "ProjectTemplate", "purrr", "raster", "rbibutils", "rcompanion", "Rcpp", "RcppArmadillo", "RcppParallel", "readr", "readxl", "recipes", "rlang", "rmarkdown", "rnaturalearth", "rsconnect", "rstan", "s2", "sass", "sf", "sourcetools", "sp", "spatial", "stringi", "survival", "terra", "testthat", "tibble", "tidyr", "tidyverse", "timechange", "timeDate", "tinytex", "triebeard", "tseries", "utf8", "vctrs", "vroom", "xfun", "xts", "yaml"))
library(caret)
?train
names(getModelInfo())
x = seq(0, 10, 0.01)
y = (5 - x) ^ 2
plot(x, y)
y = 25 - (5 - x) ^ 2
plot(x, y)
plot(x, sqrt(y))
plot(x, sqrt(max(y) - y))
plot(x, log(y))
plot(x, sinh(y))
plot(x, qnorm(sinh(y)))
plot(x, pnorm(sinh(y)))
plot(x, dnorm(sinh(y)))
comb = do.call(rbind.data.frame, lapply(ls(), get))
setwd("TransfersProj")
load.project()
library(ProjectTemplate)
load.project()
comb = do.call(rbind.data.frame, lapply(ls(), get))
head(serie.a)
ls()
rm(list = c(comb, config, helper.function, project.info))
?rm
rm(c(comb, config, helper.function, project.info))
rm(c("comb", "config", "helper.function", "project.info"))
rm(list = c("comb", "config", "helper.function", "project.info"))
comb = do.call(rbind.data.frame, lapply(ls(), get))
is.data.frame(ls())
grep("premier", ls())
comb = rbind.data.frame(X1.bundesliga,
championship,
eredivisie,
liga.nos,
ligue.1,
premier.league,
premier.liga,
primera.division,
serie.a)
cleanData = comb %>%
na.omit %>%
filter(fee_cleaned > 0) %>%
mutate(window = factor(as.numeric(factor(paste(season, " - ", transfer_period)))),
logfee = log(fee_cleaned))
load.project()
str(cleanData)
ins = cleanData %>% filter(transfer_movement == "in")
unique(ins$club_involved_name[!ins$club_involved_name %in% ins$club_name])
str(cleanData)
head(as.numeric(table(cleanData$player_name)))
head(sort(as.numeric(table(cleanData$player_name))))
head(sort(as.numeric(table(cleanData$player_name)), decreasing = T))
head(sort(as.numeric(table(ins$player_name)), decreasing = T))
head(sort((table(ins$player_name), decreasing = T))
head(sort(table(ins$player_name), decreasing = T))
head(sort(table(ins$player_name), decreasing = T), n = 10)
head(sort(table(ins$player_name), decreasing = T), n = 12)
head(sort(table(ins$player_name), decreasing = T), n = 20)
head(sort(table(ins$player_name), decreasing = T), n = 25)
head(sort(table(ins$player_name), decreasing = T), n = 23)
filter(ins, player_name == "Fernando")
filter(ins, player_name == "Martin Caceres")
filter(ins, player_name == "Martín Cáceres")
filter(ins, player_name == "Martín Cáceres")$fee
filter(ins, player_name == "Martín Cáceres" & !grep("Loan", fee))
trans.ins = ins[!grep("Loan", ins$fee), ]
loans = grep("Loan", ins$fee)
trans = ins[-loans]
trans = ins[-loans, ]
head(sort(table(trans$player_name), decreasing = T))
filter(trans, player_name == "Amauri")
filter(trans, player_name == "Adriano")
filter(trans, player_name == "Fernando")
filter(trans, player_name == "Beto")
filter(trans, player_name == "Paulinho")
filter(trans, player_name == "Émerson")
head(sort(table(trans$player_name), decreasing = T), n = 10)
filter(trans, player_name == "Cesare Bovo")
filter(trans, player_name == "Éder")
filter(trans, player_name == "Luis Suárez")
filter(trans, player_name == "Naldo")
head(sort(table(trans$player_name), decreasing = T), n = 20)
for (dataset in project.info$data)
{
message(paste('Showing top 5 rows of', dataset))
print(head(get(dataset)))
}
project.info
ins %>%
ggplot(aes(x = window,
y = logfee)) +
geom_boxplot() +
ylab("Transfer Fee (Euro)")
h1 = ins %>% ggplot(aes(x = logfee)) +
geom_histogram(aes(y = ..density..)) +
xlab("Log of Transfer Fee (Millions of Euro)") +
ylab("Density")
h1
h1 + stat_function(fun = dnorm,
args = list(mean = mean(ins$logfee),
sd = sd(ins$logfee)),
col = "#1b98e0",
linewidth = 2)
ggsave("graphics/FeeHist1.pdf", h1)
ggsave("graphs/FeeHist1.pdf", h1)
prem = ins %>% filter(league_name == "Premier League")
shiny::runApp('~/Desktop/PreReg')
runApp('~/Desktop/PreReg')
library(dplyr)
df = data.frame(a = sample(50, 10), b = rnorm(10))
d = df %>% filter(a > 100)
nrow(d)
nrow(d) == 0
runApp('~/Desktop/PreReg')
runApp('~/Desktop/PreReg')
runApp('~/Desktop/PreReg')
runApp('~/Desktop/PreReg')
runApp('~/Desktop/PreReg')
d = ""
length(d)
all(d) == ""
f = c(3, 6)
f == ""
sum(f) == ""
sum(f == "")
sum(d == "")
runApp('~/Desktop/PreReg')
runApp('~/Desktop/PreReg')
c(NA, "Hello")
runApp('~/Desktop/PreReg')
setwd("../PreReg")
df = read.csv("Modules.csv")
head(df)
strsplit(df$hasClash[2],";")
strsplit(df$hasClash[2],";")[1]
unlist(strsplit(df$hasClash[2],";"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
3 == c(4, 3, 7)
sum(3 == c(4, 3, 7))
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
df = data.frame(x = rnorm(10), y = rpois(10, 5))
df %>% mutate_all(tot = x + y)
df = data.frame(x = rnorm(10), y = rpois(10, 5))
df %>% mutate_all(tot = x + y)
df %>% mutate(tot = x + y)
?mutate
df %>% mutate(tot = x + y, .keep = "none")
df %>% mutate(tot = x + y, .keep = "none") %>% sum()
df %>% mutate(tot = x + y, .keep = "none") %>% sum
runApp()
runApp()
runApp()
output$totCreds
totCreds()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
4 %in% c(3, 6, 4)
runApp()
runApp()
runApp()
runApp()
mod = read.csv("Modules.csv")
head(mod)
mod %>% filter(grep("Semester 1", Exam))
mod %>% filter(grepl("Semester 1", Exam))
mod %>% filter(grepl("Semester 2", Exam))
runApp()
runApp()
.inArray
?$.inArray
runApp()
runApp()
runApp()
x = 5
$.inArray(x, [3, 4])
runApp()
runApp()
